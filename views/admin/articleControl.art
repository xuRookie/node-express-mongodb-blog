{{extend './common/layout.art'}}

{{block 'main'}}
<div class="article-container">
    <div class="card">
        <div class="card-header bg-light">
            文章{{type == 'add' ? '新增' : '编辑'}}
        </div>

        <div class="card-body">
            <!--
            // enctype 表单编码类型
            // application/x-www-form-urlencoded
            // multipart/form-data 表单数据编码成二进制类型
            -->
            <form method="post" action="{{link}}" class="form-validate" id="articleForm" enctype="multipart/form-data">
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label for="title-input" class="form-control-label require">文章标题</label>
                            <input type="text" id="title-input" name="title" class="form-control" placeholder="请输入文章标题" value="{{article.title}}">
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label for="author-input" class="form-control-label">作者</label>
                            <input type="text" id="author-input" name="author" class="form-control" readonly placeholder="请输入作者" value="{{@userInfo._id}}">
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="publishDate-input" class="form-control-label">发布时间</label>
                            <input type="date" id="publishDate-input" name="publishDate" class="form-control" placeholder="请选择发布时间" value="{{dateFormat(article.publishDate, 'yyyy-mm-dd')}}">
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label for="cover-input" class="form-control-label">文章封面</label>
                            <input id="cover-input" name="cover" type="file">
                            <div class="thumbnail-waper">
                                <img id="preview" class="img-thumbnail" src="{{article.cover ? article.cover : '/images/logo_167.png'}}" alt="cover" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label for="content-input" class="form-control-label">文章内容</label>
                            <div id="content-input"></div>
                            <input type="hidden" id="textarea" name="content" value="{{article.content}}" />
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <a href="/blog-admin/article" class="btn btn-secondary">返回</a>
                    <button type="submit" class="btn btn-primary btn-save">保存</button>
                </div>
            </form>
        </div>

    </div>

    <div aria-live="polite" aria-atomic="false" class="position-relative">
        <div class="toast" data-delay="3000">
            <div class="toast-header">
                <i class="icon icon-info color-danger"></i>
                <strong class="mr-auto color-danger">提示</strong>
                <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="toast-body tips-error">
            {{message}}
            </div>
        </div>
    </div>
</div>
{{/block}}

{{block 'script'}}
    <script>
        $(document).ready(function() {
            var query = url_getQueryObj()
            var file = document.getElementById('cover-input')
            var preview = document.getElementById('preview')
            if (query.message) {
                $('.tips-error').text(query.message)
                $('.toast').toast('show')
            }

            file.onchange = function() {
                // 创建文件读取对象
                var reader = new FileReader()
                // 读取文件
                reader.readAsDataURL(this.files[0])
                // 监听onload事件
                reader.onload = function() {
                    preview.src = reader.result
                }
            }

            var E = window.wangEditor
            var editor = new E('#content-input')

            // 隐藏“网络图片”tab
            // editor.customConfig.showLinkImg = false
            // 配置服务器端地址
            editor.customConfig.uploadImgServer = '/blog-admin/upload'
            // 将图片大小限制为 5M
            editor.customConfig.uploadImgMaxSize = 5 * 1024 * 1024
            editor.customConfig.uploadImgMaxLength = 1
            editor.customConfig.withCredentials = true
            editor.customConfig.uploadImgTimeout = 30000

            editor.customConfig.uploadImgHooks = {
                before: function (xhr, editor, files) {
                    // 图片上传之前触发
                    // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象，files 是选择的图片文件

                    // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传
                    // return {
                    //     prevent: true,
                    //     msg: '放弃上传'
                    // }
                },
                success: function (xhr, editor, result) {
                    // 图片上传并返回结果，图片插入成功之后触发
                    // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象，result 是服务器端返回的结果
                    console.log('编辑器，上传成功')
                    console.log('result', result)
                },
                fail: function (xhr, editor, result) {
                    // 图片上传并返回结果，但图片插入错误时触发
                    // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象，result 是服务器端返回的结果
                    console.log('编辑器，上传失败')
                    console.log('result', result)
                },
                error: function (xhr, editor) {
                    console.log('请求出错', xhr)
                    // 图片上传出错时触发
                    // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象
                },
                timeout: function (xhr, editor) {
                    // 图片上传超时时触发
                    // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象
                },

                // 如果服务器端返回的不是 {errno:0, data: [...]} 这种格式，可使用该配置
                // （但是，服务器端返回的必须是一个 JSON 格式字符串！！！否则会报错）
                customInsert: function (insertImg, result, editor) {
                    // 图片上传并返回结果，自定义插入图片的事件（而不是编辑器自动插入图片！！！）
                    // insertImg 是插入图片的函数，editor 是编辑器对象，result 是服务器端返回的结果

                    // 举例：假如上传图片成功后，服务器端返回的是 {url:'....'} 这种格式，即可这样插入图片：
                    var url = result.url
                    insertImg(url)

                    // result 必须是一个 JSON 格式字符串！！！否则报错
                }
            }

            editor.create()

            var content = $('#textarea').val()
            if (content) {
                editor.txt.html(content)
            }

            $('#articleForm').on('submit', function() {
                var $form = $(this)
                var data = serializeToJson($form)
                var html = editor.txt.html()
                $('#textarea').val(html)
                if (!data.title) {
                    $('.tips-error').text('请输入标题')
                    $('.toast').toast('show')
                    return false
                }
            })
        })
    </script>
{{/block}}
